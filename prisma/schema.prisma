generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model comment {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content    String   @db.VarChar
  user_id    String   @db.Uuid
  post_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  post       post     @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model event {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String       @db.VarChar(50)
  description     String?      @db.VarChar
  location        String       @db.VarChar(100)
  start_time      DateTime     @db.Timestamp(6)
  end_time        DateTime     @db.Timestamp(6)
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  post            post[]
}

model event_category {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
}

model event_media {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
}

model like {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  post_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  post       post     @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model location {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
}

model organization {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description  String?  @db.VarChar
  address      String?  @db.VarChar(100)
  phone_number String?  @db.VarChar(15)
  website      String?  @db.VarChar(100)
  name         String   @db.VarChar(255)
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  user_id      String   @db.Uuid
  tenant_id    String   @db.VarChar(255)
  event        event[]
  user         user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model post {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title      String    @db.VarChar(50)
  content    String    @db.VarChar
  user_id    String    @db.Uuid
  event_id   String    @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  comment    comment[]
  like       like[]
  event      event     @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  comment      comment[]
  like         like[]
  organization organization[]
  post         post[]
}

model user_followers {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
}

model user_likes {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
}

model user_profile {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
}
